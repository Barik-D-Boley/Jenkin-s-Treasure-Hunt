const input = [
    "FBFFBFFRLL",
    "BFFFFBBRLR",
    "FFFBBBBRLR",
    "FBFFFBFLRL",
    "FFBFBFFRRL",
    "FFBBBBFRRR",
    "FBFFBFBLRR",
    "FFBBFBFRRL",
    "FFFFBBFRRL",
    "BFBBBBBLLL",
    "FFBFBFBLLL",
    "FFBFFFBLLL",
    "FBBBFBFRLL",
    "BBFFFBFRRR",
    "FFFBFBBLLR",
    "FBFBFBFRRR",
    "BBFFBFBRLL",
    "FBFBBBBLRL",
    "FBFFFFFLLL",
    "BFFFFFFRLL",
    "BFFFBFBLRL",
    "BFBBBFBRRL",
    "BFFFBFFRRL",
    "FBFFFFFRRR",
    "FFBBBBBLLR",
    "BFBBFFBLRL",
    "FBBFBBBRLR",
    "BFBFBFFRLL",
    "BFBFBFBRLL",
    "BFFBFBFLLL",
    "FFBBFFBLRL",
    "FBBFFBFLRR",
    "FBBBFBBRRR",
    "BFBFFBFRLR",
    "BFBBBFBLLL",
    "FFBFBBBLRR",
    "BFBFFBFLLL",
    "FBFBFBBLLL",
    "BFBBBFBLRL",
    "FBFBFBFLRL",
    "FFBFFBFRRL",
    "FBBFFBFLLL",
    "BFBBBBBLRL",
    "FBBBBBFRLR",
    "BFFFBBFRLL",
    "FBBBBFFLLR",
    "FBBBBBFRLL",
    "BFBBBFFRLR",
    "BFBBBFBRLL",
    "BFFFBFFLLL",
    "FFFBFBFLRL",
    "BFFBBFFLRL",
    "BBFFFBFRLL",
    "BFBBFFBRLR",
    "BFBFBFBRRL",
    "BBFFFBFRRL",
    "FBBFBBBLRR",
    "FFBFBBBLLL",
    "BFFFBFBRLR",
    "FFBBFBBLLL",
    "FBFBBFBLLL",
    "BFBBFBFLLR",
    "FFBFBBBRRL",
    "FFBFFFFLRL",
    "FFFBBFFLRR",
    "FBBBBBFRRR",
    "FFFFBBBRLL",
    "BFBFBBBRRR",
    "BBFFBFBRRL",
    "FBFBBFFRLR",
    "FBBFFBFRRR",
    "BBFFBFBRRR",
    "FBFBBFBLRR",
    "FBBFFBBLRR",
    "FBBBBFFRLL",
    "BFBFFFBRLR",
    "FBFBBFBRRL",
    "FFBFBBFRRR",
    "FBFBFFFRLL",
    "BFBBFFBLLR",
    "FBFFFFBRLR",
    "BFBBBFFRLL",
    "FFBBFFBRLR",
    "FFFBBFBRLL",
    "FBBBBBBLRR",
    "FBFFBBBLRR",
    "BFFFFBFLRL",
    "BBFFFFFLRR",
    "BFFBFFBLLR",
    "FFBBBFFRLL",
    "BFBFBFBRLR",
    "FBBFBFBLRR",
    "FBFBBBFRLR",
    "FBFFBBBRRR",
    "FBBFFBFRLL",
    "FBBBFFFRLR",
    "BFBBBBFLLR",
    "BFFFBFFLLR",
    "FFBFFFBRRR",
    "FBFFFBFLLR",
    "FFFFBBBLLR",
    "BFBFFFBRLL",
    "BFFBBFBLRL",
    "BFFBFBFLLR",
    "FFBFFBFRLR",
    "BFBFFFBRRL",
    "FFBBFBFLLL",
    "BFBBBBBRLR",
    "BFBFBFBLRR",
    "FBFFBFBLLR",
    "FBFBFBBRRL",
    "BFBFBBBLLL",
    "FFBBFBBLRL",
    "FBFFFBFRRL",
    "BFBBFFFLRR",
    "BFBFBBFRRR",
    "FBFFFFBLRL",
    "BBFFBBFRRR",
    "FFBFFBBRLR",
    "FBBFBFBLRL",
    "BFBFFFBRRR",
    "FFFBBBFLRL",
    "BFFBFFBRLL",
    "FBFBFFBLRR",
    "FFBFBBFLLL",
    "FFBBBFFLRL",
    "FFBBFFFRLR",
    "BBFFBFBLRL",
    "FFFFBBFRLR",
    "FFFBFFBLRR",
    "BFFBBBFLLR",
    "BFFFBBBRRL",
    "FBBFBFBRLL",
    "BFFBFFFRRR",
    "BBFFFFFLRL",
    "BBFFFBBRLL",
    "BFFFBBBRRR",
    "BFFFBBBLRL",
    "BBFFBFFRRR",
    "BFFBFFBLRL",
    "FBBBBFBRLR",
    "FFFBFBFRRL",
    "BFFBBBBRRL",
    "FBBBBBFLRR",
    "FBFBBBBLLR",
    "FBBBBFBLRR",
    "FFFBFFBRLL",
    "FFBBBBFLLR",
    "FFBBBBBRRL",
    "FBBFFFFLLL",
    "FBFFBBBRLL",
    "FBFBFFBLLR",
    "FBBBBBFRRL",
    "BFFFBFBLLL",
    "FFFBFFFLRL",
    "FFFFBBFRLL",
    "BFBBFFFRLR",
    "BFFFBBBRLR",
    "FFBBBFBLLR",
    "BFFFBFBRRR",
    "BFFBFBBLRL",
    "FFBFBFBLRR",
    "FBBBBFBRRR",
    "FFBFBFFLLR",
    "BBFFFFFLLR",
    "FBBBFBFRRR",
    "BBFFFFBRRL",
    "FBFBFBBLRL",
    "BFBBBFFLLR",
    "BBFFBBFLRL",
    "BFBFFBBRLR",
    "FBFBBBFRRL",
    "FBBBFFBRLL",
    "BBFFFFBLLR",
    "FFBBFBBLRR",
    "FBBBBBBRLR",
    "FFFFBBBRRL",
    "FBFBBBBRLR",
    "BBFFBFFRRL",
    "FBBBFFBLRL",
    "FFBBBFBLRR",
    "BFBFBBBRLL",
    "FBFFFBBLRL",
    "FBFBBBBRLL",
    "BBFFFBBLLL",
    "BFBBFFBLLL",
    "BFFBBBBRRR",
    "FBFBFFBLLL",
    "FBFBFBFRRL",
    "FBBFFFBLLL",
    "BBFFFBFRLR",
    "FBBBBFFLRR",
    "FBFFFBBRLL",
    "FFBBFBFRRR",
    "FBFFFFFLRR",
    "BFBFFBBLRR",
    "FFBFBFFRRR",
    "BFBFFBBRLL",
    "FBBFFFFRRL",
    "BFFBBFBRLL",
    "BFFFFFBLLR",
    "FBFBBFBLLR",
    "BFFBBFBRLR",
    "BFFBFBFRRR",
    "FFBFBBFRLL",
    "FFFBBBBLRR",
    "BFFFBFBLLR",
    "FBBBBFBLRL",
    "FBFBBFFLRL",
    "FFFBFFFRLL",
    "BFFFFBBRRL",
    "FBBFFFBRRR",
    "FBBFBFFLLR",
    "BFBBBBBRRR",
    "BFFBFBFRLL",
    "FFBFBBFRRL",
    "BFBFBFBLLR",
    "FFBFBBFLLR",
    "FFBFFFFLRR",
    "FBBBFBBRRL",
    "BFFBFBFRLR",
    "BFFBFFBRRL",
    "BFBBBFBRLR",
    "BBFFFFBLRL",
    "FBBBFFBRRL",
    "FBFFFBBRRL",
    "FBBBBBBLLL",
    "FFFBFFBLLL",
    "BFBBFBFRLL",
    "FBFBFFBRLR",
    "FFFFBBBRRR",
    "BBFFFBBRLR",
    "BFBBBBFRLR",
    "FBFFBBFLRR",
    "BFFFBFFRLR",
    "FFFBBBBLLR",
    "FBFFFFBLRR",
    "FBFBFBBRLL",
    "FBFFBBBRLR",
    "BFFFFFFLRR",
    "FBFFFFFRLL",
    "FFBFBFFRLL",
    "FFFBBFFRLR",
    "FBBFBFFRRL",
    "FBBBBBBRRR",
    "BFBFBBBLRL",
    "BBFFFFBRRR",
    "FFBFFBBLRL",
    "FBBBBBBLLR",
    "FFBBFFFLRL",
    "FBBBFBBLRR",
    "FFBBBBBRLR",
    "BFBFFFFLLR",
    "BFFBBBBRLL",
    "BFBFBFFLRL",
    "FBBFFFBLRL",
    "BFBFBBBRRL",
    "BFBFBFBLRL",
    "BFBBFBFLRR",
    "BFFFFBFRLR",
    "BFFFBFBRLL",
    "FBFBFBFLLL",
    "FBFFBFFLRL",
    "BFFFFFFRRL",
    "FBBFBFFRLR",
    "FFBBBFFLLR",
    "FBBBBFFLRL",
    "FBBBFBBRLR",
    "BFBBBFFLRL",
    "FBFFBBBLRL",
    "BFFFFBFRRL",
    "BFFFBFFLRR",
    "FFBFBBFLRL",
    "BFBFFFBLRL",
    "BFFFFFBLLL",
    "FBFFBFBLLL",
    "FBFBBBBRRL",
    "FBBFFBBRLR",
    "BFFFBBFRRL",
    "BFBBFBBRLR",
    "FFFBFBBLRR",
    "FFFBFBFRLR",
    "FBFBFBFRLR",
    "BFBFBBBRLR",
    "BFFFFBBLLL",
    "BFFBBFBRRR",
    "BFFBBBFLLL",
    "FFBBBFFRRL",
    "BFBBBFBLLR",
    "FBBFFBBLLR",
    "FBBFBBFLRL",
    "BFFFFFBRRR",
    "FBBBFBBRLL",
    "FBFBFFBRRR",
    "BFFBBBFRRR",
    "FBBBBBBLRL",
    "FFBBBFFLRR",
    "BFFBBBFRLL",
    "BBFFBBFRLL",
    "FBBFBBFRLR",
    "BFBFBFFRRR",
    "BFBFBBFLRL",
    "BFFFFBFRLL",
    "FFBBFBFLLR",
    "BFFBFBBLRR",
    "FBFFBBBRRL",
    "FBBFBBFRLL",
    "FBFFFBBLLR",
    "FFFBBBBRRR",
    "FFFFBBBLRL",
    "FFBBFFFRRL",
    "BFFBBFFRRL",
    "BFFFBBFLRL",
    "BFFFFBBLRR",
    "BBFFBBBLRR",
    "BFBFFFFLRR",
    "FBFBBBBLLL",
    "BBFFFBBLRR",
    "FFFBFBFLRR",
    "FBBFFFFLRL",
    "FFBBBBFRLL",
    "FBFFBFBLRL",
    "BFBBFBBLLL",
    "FBBFBBFLLL",
    "FFBFFBBRLL",
    "BFBFFFFRLR",
    "FBFFBBFRRR",
    "FFFBBFFRRR",
    "FFFBFFBRLR",
    "FBBBBBFLLL",
    "FBBBFFFLRL",
    "FFBBFFFLRR",
    "FFFBBBBRRL",
    "BFBFBBFRLL",
    "BFBFFBBRRL",
    "FBBFBBFRRL",
    "BFBFBBFLLR",
    "BBFFBBBRRR",
    "BFFFBBFRLR",
    "FFFBBBFRLR",
    "BFFBFFFRLL",
    "BFBFFFFRRL",
    "FFBBFFFLLL",
    "FBFBBBBLRR",
    "FBFBFFFLRR",
    "BBFFBFFLRR",
    "FBBBFBBLRL",
    "BFBFBFBLLL",
    "FBFBFFFLLR",
    "BFFBBFBLRR",
    "FBBFFFBRRL",
    "BFFBBFFRRR",
    "FBBFBBBRRL",
    "BFFFFBBLLR",
    "FFBBBBFLLL",
    "BFFBFFBRRR",
    "BFFFFBFRRR",
    "FFFBBBFRRR",
    "FBFBFFFRLR",
    "FBBBFBFLLR",
    "FFBBFFBRLL",
    "FBFBFFFLLL",
    "BFFBFBFRRL",
    "BFBFFBFRRL",
    "BFBBBBFLLL",
    "FBBBFBFRRL",
    "FFBFBFFLLL",
    "BFBBFFFRRL",
    "FFBBFFBLLR",
    "BFFBBBBRLR",
    "FFBBBBBLRR",
    "BFFBFFFRRL",
    "BFFBFBBRLL",
    "FBBBFBFRLR",
    "FBBFFFFLRR",
    "BFFFBBFLLR",
    "FFFBBFBRRL",
    "FFBBFFBLRR",
    "FBBFFFBRLR",
    "BFBBBBBRLL",
    "BBFFFFFRRL",
    "FFBFFBBRRL",
    "BFBFFBFLLR",
    "FBFBBBFLLL",
    "FBFFFFFRRL",
    "BFFFBFBLRR",
    "FBFFFFBLLR",
    "FBBFBFBRRR",
    "FBBBFFFLLR",
    "BBFFBFBLRR",
    "BBFFFBFLLL",
    "FBFFFBFRLR",
    "BFFFBFFLRL",
    "BBFFBFFLRL",
    "BFFFFFFLLR",
    "BBFFBBBLLL",
    "FFBFBBBLLR",
    "FBBFBBBLRL",
    "BFBBFBBLRR",
    "FFBFBFBLLR",
    "FFBFBFBRRL",
    "BFBBFBBRRL",
    "BFFBFFFLLR",
    "FFBBFFBRRL",
    "BBFFBBBRRL",
    "FFFBBFBRLR",
    "BFBBFBFRRR",
    "BFFFFFFRRR",
    "FBBBFFBLLL",
    "BFBFFFFLLL",
    "BBFFBFBLLR",
    "BFBFBBFRLR",
    "FFBFBBBRRR",
    "BFFFBBFLLL",
    "FBFFBBFRLL",
    "FFBBFBFRLL",
    "BFBFBBBLLR",
    "FBBFBFBLLL",
    "BBFFFFBRLL",
    "BBFFBFBLLL",
    "BFFBFFBLRR",
    "BFFBBFBLLL",
    "FFBFFFBLRR",
    "FBBFFBFRRL",
    "FBBBBFBLLL",
    "FFBFFBBLLR",
    "BFFBBBFLRR",
    "FBFBFFBRLL",
    "FFBFFFBRLL",
    "FFBFFBFLLL",
    "FBFBBFBLRL",
    "FBBFBFFRRR",
    "BFBFBFFLLR",
    "FBBFFFBLLR",
    "BFBBBBFRRR",
    "FBBFBBFRRR",
    "BBFFBFFRLR",
    "FBFBBBFRLL",
    "FBBFBBBLLR",
    "BFFFFFFLRL",
    "BFBFFBBRRR",
    "BFFFBFFRLL",
    "BFBBFBFLRL",
    "FFBFFFFRRR",
    "BFFBBFFRLR",
    "FBBBBBFLLR",
    "FBFBFFBLRL",
    "FFFBBFBLLR",
    "FBBFBFBLLR",
    "FFFBFFBRRR",
    "FBFFFFFRLR",
    "FBFBBFBRLR",
    "FBBBFBFLRR",
    "FBFBBBFLRL",
    "BFFBFFFLRL",
    "FFBBBFFRRR",
    "FFBBBBBLLL",
    "FBFFBBFLLR",
    "FFBFBFFLRR",
    "FFFBBBFLRR",
    "BFBFBBFLLL",
    "BBFFBFFLLR",
    "FFBBFBBRLL",
    "FBBFFBBLLL",
    "FBFFBFBRLL",
    "BFBFBFFLRR",
    "FBBBFFBRLR",
    "FFBFFBFRLL",
    "FFFFBBBLLL",
    "FFBFFBBRRR",
    "FBBBBFBRLL",
    "BFFFFBBRRR",
    "FFBBFFFRLL",
    "FFBFBFBRLL",
    "BBFFFFBLLL",
    "FFBBBFBRRL",
    "BFFFFBBLRL",
    "FBBBFBBLLR",
    "FBBBFBBLLL",
    "FFBFBFBLRL",
    "FBBBBFFRRR",
    "FBBFFFFRLR",
    "FFBFFFBRLR",
    "BFBFBFBRRR",
    "FFFBFBBRLL",
    "FBBBFFBRRR",
    "FBBFBFFRLL",
    "BFFBFBFLRR",
    "BFBBBFFRRL",
    "BFFBBFBLLR",
    "FFBBBFBRLL",
    "FBFBFBBLRR",
    "BFBBFFFLRL",
    "BFBFBBFLRR",
    "BFBBBFFRRR",
    "FBBBFFFRRL",
    "FBFBFBFLLR",
    "FBBFFFFLLR",
    "FFBFBBFRLR",
    "FFFBFBBLRL",
    "BBFFFBBLLR",
    "BFFBBBFRLR",
    "FFFFBBBRLR",
    "BBFFBBFRLR",
    "FBFFFFBRLL",
    "FBFBFFFRRR",
    "FBFFFBBLLL",
    "BFBBBBFRLL",
    "FBFBFFBRRL",
    "FFFBFFFRLR",
    "BFBBFBFRRL",
    "FBFFBFFLRR",
    "FBFFFBBLRR",
    "FFBFBBBRLR",
    "FBBFBFFLRR",
    "FBFFFBBRRR",
    "FFBFBBBRLL",
    "FFBBBBBRRR",
    "BFFBBFFLLL",
    "BFBBBBBRRL",
    "BBFFBBBRLL",
    "FBFFFFFLRL",
    "BFFBBFFLRR",
    "FBFFBBFLRL",
    "BFBFFBFRRR",
    "FBFBBFBRLL",
    "BFFFBFBRRL",
    "FBBFFBFLLR",
    "BFFFFFFLLL",
    "FBFBFBFRLL",
    "FBBBBFFRRL",
    "BFBFFBBLLR",
    "FBBFBFBRRL",
    "FFFBFFFLLR",
    "FFBBBBBLRL",
    "FFBFFBBLRR",
    "FFFBFBFRRR",
    "BFBBFBBRLL",
    "BFBBBFBLRR",
    "FFBBBBFLRR",
    "FBBBFFBLLR",
    "BBFFBBBLLR",
    "FBFBBFFRRL",
    "FBBBBBFLRL",
    "FFFBBFFRRL",
    "BFFBBBBLRR",
    "FFFFBBBLRR",
    "FFFFBBFLRR",
    "FBFFFBFLLL",
    "FBFBFBBLLR",
    "BFFBBBBLLL",
    "FFBFFFFRLR",
    "BFBBFFBLRR",
    "FFBBFBFLRL",
    "BFBFBFFLLL",
    "BFFBFBBLLR",
    "BFBBFBBLRL",
    "FFBBBBFLRL",
    "FBBBFFFLLL",
    "FFFBFFBRRL",
    "BFFFFBBRLL",
    "BFFFBBBRLL",
    "BFFBFFFLRR",
    "FFBFBFBRRR",
    "BBFFBBFLLR",
    "FFBBFBBLLR",
    "FFBFFBFRRR",
    "FFBBBFFRLR",
    "BFFBBBBLLR",
    "FFFBFFFLRR",
    "FBFFFFFLLR",
    "FBFFBBBLLL",
    "BBFFBBFLLL",
    "FFBBFBFLRR",
    "BFFBFBFLRL",
    "FBFBBBFRRR",
    "BFBBFBBLLR",
    "FBFFFFBRRL",
    "FFFBBFBLRR",
    "BBFFFFBLRR",
    "BFBBBBFRRL",
    "FFBBBFBLLL",
    "BFBBFBFRLR",
    "BFBBFFBRRL",
    "BFBFBFFRRL",
    "FBBFFBBLRL",
    "FFFBFFBLRL",
    "BFFBBFFRLL",
    "FBBBFFFRLL",
    "FBBFBBFLLR",
    "FFBFFFFLLR",
    "FBBBFBFLRL",
    "BFFFBBBLLR",
    "FBFBBBBRRR",
    "FBBFBFBRLR",
    "FFFBFBFLLR",
    "FFFFBBFRRR",
    "FFFBBFFLRL",
    "BFBFFBFRLL",
    "FFFBFFBLLR",
    "FBBFFFBRLL",
    "FFBBBFBRRR",
    "FFBBFBBRLR",
    "BBFFFFFRRR",
    "FFBFFFFRLL",
    "FBBFFBBRRL",
    "BBFFFBFLRR",
    "FBBFFFFRRR",
    "FFBFFFBRRL",
    "BFBBFBFLLL",
    "BFFFFBFLRR",
    "BBFFFFFLLL",
    "FFBBFBBRRL",
    "FFBFBFFLRL",
    "FBFFBBFRRL",
    "BBFFBFBRLR",
    "BBFFBBFLRR",
    "FBFFBFBRRR",
    "FBBFBBFLRR",
    "FBFFFBFRLL",
    "BFBFFFFLRL",
    "FFFBBFBRRR",
    "BFBBBBBLLR",
    "FBBFFBBRRR",
    "FFBBBFFLLL",
    "FBBBBFBLLR",
    "BBFFFFFRLL",
    "FFBBBBFRLR",
    "FBFBFBBRRR",
    "FBFFBFFLLL",
    "FBFFBBBLLR",
    "FBBBBFBRRL",
    "BFBFBFFRLR",
    "FBBFBBBRLL",
    "BFBBFFFRLL",
    "FBBBFBFLLL",
    "FFBFFFFRRL",
    "FBFBBFFRRR",
    "FBFFFFBLLL",
    "FBBBBBBRLL",
    "BFFBFBBRRR",
    "BBFFBBFRRL",
    "FBBFBFFLRL",
    "FBFFFFBRRR",
    "FBBFFFFRLL",
    "FFFBFFFRRR",
    "FBFFBBFLLL",
    "BFFFFBFLLL",
    "BFFFFBFLLR",
    "FFBFFBFLLR",
    "FFBFFBFLRR",
    "BFFBBBBLRL",
    "FFBBFFBLLL",
    "FBBFBBBLLL",
    "FBFBBBFLLR",
    "BFFBBBFLRL",
    "BFBBFFBRLL",
    "FBFFBFFRRR",
    "FFBFFFBLRL",
    "FFFBBBFRRL",
    "FFBFBBFLRR",
    "FFFBBBBLRL",
    "FFFBBFFLLL",
    "FFFBFBBRRR",
    "FBBFBFFLLL",
    "BFFFBBBLLL",
    "BFFBFFFRLR",
    "FFFBBBBLLL",
    "BFFFFFBRRL",
    "FFBBFFFLLR",
    "BFBBFFFRRR",
    "BFBFFBFLRR",
    "FFFBBBFLLR",
    "FBFBBBFLRR",
    "BBFFBBBRLR",
    "FBFBBFFLRR",
    "FFBBBFBLRL",
    "FFFBBBFRLL",
    "BFFBFFBRLR",
    "BBFFFBBRRR",
    "BFBBBBFLRL",
    "BFBBBFBRRR",
    "FBBBBFFLLL",
    "FFFBFBBLLL",
    "BBFFFFFRLR",
    "BBFFBFFLLL",
    "FFBFBBBLRL",
    "FFBBFBFRLR",
    "BFBBBBBLRR",
    "FFBFFFBLLR",
    "FFBFFBFLRL",
    "BFFBFBBRLR",
    "FBFBFFFRRL",
    "FBBBFFFLRR",
    "FFFBBFFLLR",
    "FBBBBFFRLR",
    "FFBBFBBRRR",
    "BFBBFBBRRR",
    "BFBFBBFRRL",
    "BFFBBBFRRL",
    "FFFBFFFLLL",
    "FBBFFBFLRL",
    "FFFBFBBRLR",
    "BFBBFFFLLR",
    "BFBBFFBRRR",
    "FBFFBFBRRL",
    "FFBBBBBRLL",
    "BFFBFFBLLL",
    "BFFFBBFRRR",
    "FBFFFBFRRR",
    "FFBFBFBRLR",
    "FBFBBFFLLR",
    "FBBFBBBRRR",
    "BFBFFFFRRR",
    "FFBFFFFLLL",
    "FBFBBFFRLL",
    "BFBFFBFLRL",
    "BFBBFFFLLL",
    "FBFBBFBRRR",
    "BFBFFFBLLR",
    "BFBFFFBLLL",
    "BBFFFBFLLR",
    "BBFFBFFRLL",
    "FFBBBBFRRL",
    "BBFFFBFLRL",
    "BBFFBBBLRL",
    "BFBFFFBLRR",
    "FFFBFBFRLL",
    "BFBFFBBLLL",
    "BBFFFBBRRL",
    "BFBBBFFLLL",
    "BFFBBFFLLR",
    "FFBFFBBLLL",
    "BFFBBFBRRL",
    "BFFFFFBLRL",
    "BBFFFFBRLR",
    "FBFBBFFLLL",
    "FFBBBFBRLR",
    "FFFBBFBLLL",
    "FBFFFBBRLR",
    "FFBFBFFRLR",
    "BFFFFFBLRR",
    "FFFBBBBRLL",
    "FFBBFFFRRR",
    "BFFFFFBRLR",
    "FBBBFFBLRR",
    "FBFBFBBRLR",
    "FBBFFFBLRR",
    "BFBFFBBLRL",
    "FBFFBFBRLR",
    "FBFBFFFLRL",
    "BFFFFFBRLL",
    "BFBBBBFLRR",
    "BFFBFFFLLL",
    "FBFFBFFRRL",
    "FFFBBFFRLL",
    "BFFFBFFRRR",
    "FBFFBFFLLR",
    "FFFBBBFLLL",
    "FBFFFBFLRR",
    "BFFBFBBLLL",
    "BFFFBBBLRR",
    "FBBBBBBRRL",
    "FBFFBFFRLR",
    "FBBFFBBRLL",
    "FBBBFFFRRR",
    "BFFBFBBRRL",
    "FFBBFFBRRR",
    "BFBBBFFLRR",
    "FFFBFBBRRL",
    "BFBFBBBLRR",
    "FFFBBFBLRL",
    "FBFFBBFRLR",
    "BFFFBBFLRR",
    "BBFFFBBLRL",
    "FBBFFBFRLR",
    "FFFBFBFLLL",
    "FFFBFFFRRL",
    "BBFBFFFLLL",
    "FBFBFBFLRR",
    "BFBFFFFRLL",
  ];

let coords = [];
let gridNums = [];

//Used to get the numbers neccessary to the questions
function backbone() {
    //Resets these 2 arrays so the function can be run infintie times without changing
    coords = [];
    gridNums = [];

    //For Loop with nested for loops so it can compare each letter in the sequence, then go onto the next sequence
    for (i = 0; i < input.length; i++) {
        //Setting up variables that will be used later
        let letters = input[i].split('');
        
        let front = 127;
        let back = 0;
        let latitude = 0;

        let left = 7;
        let right = 0;
        let longitude = 0;

        //For Loop for the F/B part of the sequence
        for (j = 0; j < 7; j++) {
            //Finds the average between the 2 numbers and sets it to the differnt number depending on the input
            latitude = (front + back) / 2;

            if (letters[j] == 'F') {
                latitude = Math.floor(latitude);
                front = latitude;
            } else {
                latitude = Math.ceil(latitude);
                back = latitude;
            }
        }

        //For Loop for the L/R part of the sequence
        for (j = 7; j < 10; j++) {
            //Finds the average between the 2 numbers and sets it to the differnt number depending on the input
            longitude = (left + right) / 2;

            if (letters[j] == 'L') {
                longitude = Math.floor(longitude);
                left = longitude;
            } else {
                longitude = Math.ceil(longitude);
                right = longitude;
            }
        }

        
        coords.push([[latitude], [longitude]]);
        let oneGridNum = (latitude * 8) + longitude;
        if (oneGridNum < 100) {
            oneGridNum = "0" + oneGridNum;
        }

        gridNums.push(oneGridNum);
    }
    console.log(gridNums);
}

function questionOne() {
    backbone(input);

    let gridMax = 0;
    let gridMin = 9999;
    let grid = 0;

    coords.forEach(lat => {
        grid = (lat[0] * 8) + Number(lat[1]);

        if (grid > gridMax) {
            gridMax = grid;
        }
        if (grid < gridMin) {
            gridMin = grid;
        }
    });
    console.log(`The answer to Question 1 is ${gridMax} and ${gridMin}`)
}
questionOne();

function questionTwo() {
    backbone(input);

    for (i = 0; i < gridNums.length; i++) {
        if (gridNums.sort()[i] != (i + 51)) {
            console.log("The answer to Question 2 is " + Number(gridNums.sort()[i] - 1));
            break;
        }
    };
}
questionTwo();